import clr
clr.AddReference("RevitServices")
import RevitServices
from RevitServices.Persistence import DocumentManager
from RevitServices.Transactions import TransactionManager

clr.AddReference("RevitAPI")
clr.AddReference("RevitAPIUI")
import Autodesk
from Autodesk.Revit.UI import *
from Autodesk.Revit.DB import *

import System
from System.Collections.Generic import *

# Import ToProtoType(bool) extension method
clr.AddReference("RevitNodes")
import Revit
clr.ImportExtensions(Revit.GeometryConversion)
clr.ImportExtensions(Revit.Elements)


def constructSolid(elem):
	center = elem.Location.Point

	length = 1000
	width = 500
	height = 100
	
	profile = []
	p00 = XYZ(-length / 2, -width / 2, 0)
	p01 = XYZ(-length / 2, width / 2, 0)
	p11 = XYZ(length / 2, width / 2, 0)
	p10 = XYZ(length / 2, -width / 2, 0)
	
	profile.append(Line.CreateBound(p00, p01))
	profile.append(Line.CreateBound(p01, p11))
	profile.append(Line.CreateBound(p11, p10))
	profile.append(Line.CreateBound(p10, p00))
	
	curveLoop = CurveLoop.Create(profile)
	
	options = SolidOptions(ElementId.InvalidElementId, ElementId.InvalidElementId)
	prism = GeometryCreationUtilities.CreateExtrusionGeometry([curveLoop], XYZ.BasisZ, height, options)
	transform = elem.GetTransform()
	transform.Origin = XYZ(center.X * 304.8, center.Y * 304.8, (center.Z * 304.8) + 2100)
	return SolidUtils.CreateTransformed(prism, transform)


doors = UnwrapElement(IN[0])


OUT = [constructSolid(d).ToProtoType(False) for d in doors]
